/*
 * This is a custom module for parsing Parameters passed
 * into the commandline.  It utilizes the minimist npm
 * module to do the parsing.  Then it identifies the correct
 * and incorrect Parameters and Values in the sense of
 * which Parameters have Values.  It does not do validation
 *
 * Does:
 * 1) Validates which Parameters have Values
 * 2) 
 *
 * Does Not:
 * 1) Validate Values of Parameters are correct or accurate
 * 2) Check to see 
 */
// npm Module for getting Parameters from the commandline
var argv = require('minimist')(process.argv.slice(2));

// Example local module import
//var dt = require('./myfirstmodule');

// Example method
exports.myDateTime = function () {
 return Date();
};

exports.parsed_parameters = function (required_parameters) {

 // ans means answer
 // it is the usual variable name isajediknight uses when wanting to
 // return values from a method / class / etc
 var ans = {}

 if(which === null) {
  which = 'defined_keys';
 }

 // List of all actual keys
 var keys = Object.keys(argv);
 //console.log(keys);// Debugging

 // List of human defined keys that were actually passed in
 var human_keys = []

 // Parameters with no Value passed in
 var bad_parameters = []

 // Correct Paramters
 var good_parameters = []

 for (var index = 0; index < keys.length; index++) {
  //console.log(keys[index] + ": "+ argv[keys[index]]);
  if(argv[keys[index]] === true) {
   bad_parameters.push(keys[index]);
   human_keys.push(keys[index]);
  }
  else if((argv[keys[index]] != null) && (keys[index] != '_')) {
   good_parameters.push(keys[index]);
   human_keys.push(keys[index]);
  }
 }

 // Values with no Parameter passed in
 var bad_values = []

 for (index = 0; index < argv['_'].length; index++) {
  if(argv[['_'][index]] == null) {
   //pass
  }
  else {
   bad_values.push(argv[['_'][index]])
  }
 }

/*
 * Tried to make this a class without success
 constructor(good_parameters, bad_parameters, defined_keys) {
 */
 this.good_parameters = good_parameters;
 this.bad_parameters = bad_parameters;
 this.human_keys = defined_keys;
 this.bad_values = bad_values;
 
 //}


 //get_good_parameters = function() {
 if(which == 'good_parameters') {
  return this.good_parameters;
 }
 
 //get_bad_parameters = function() {
 if(which == 'bad_parameters') {
  return this.bad_parameters;
 }

 //get_defined_keys = function() {
 if(which == 'defined_keys') {
  return this.defined_keys;
 }

}
