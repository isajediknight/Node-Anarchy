/*
 * This is a custom module for parsing Parameters passed
 * into the commandline.  It utilizes the minimist npm
 * module to do the parsing.  Then it identifies the correct
 * and incorrect Parameters and Values in the sense of
 * which Parameters have Values.  It does not do validation
 *
 * Does:
 * 1) Validates which Parameters have Values
 * 2) 
 *
 * Does Not:
 * 1) Validate Values of Parameters are correct or accurate
 * 2) Check to see 
 */
// npm Module for getting Parameters from the commandline
var argv = require('minimist')(process.argv.slice(2));

// Example local module import
//var dt = require('./myfirstmodule');

// Example method
exports.myDateTime = function () {
 return Date();
};

exports.parsed_parameters = function (required_parameters,print_missing_parameters) {

 // Debugging
 //console.log("Starting Method!");
 //console.log(required_parameters);
 //console.log(print_missing_parameters);

 // ans means answer
 // it is the usual variable name isajediknight uses when wanting to
 // return values from a method / class / etc
 var ans = {
  'human_keys':[],
  'bad_parameters':[],
  'good_parameters':[],
  'bad_values':[]
 };

 var required_parameter_check_passed = false;

 // List of all actual keys
 var keys = Object.keys(argv);
 // Uncomment below line to see keys that were passed in verbatim
 //console.log(keys);

 // List of defined keys that were actually passed in
 var human_keys = []

 // Parameters with no Value passed in
 var bad_parameters = []

 // Correct Paramters
 // Correct in the sense that there is a Value
 // Not that the Value is valid
 // No quality validation is done in this module
 var good_parameters = []

 // Record:
 //   Good Parameters
 //   Bad Parameters
 //   Human Keys
 for (var index = 0; index < keys.length; index++) {
  if(argv[keys[index]] === true) {
   bad_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['bad_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
  else if((argv[keys[index]] != null) && (keys[index] != '_')) {
   good_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['good_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
 }

 // Values with no Parameter passed in
 var bad_values = []

 for (index = 0; index < argv['_'].length; index++) {
  if(argv[['_'][index]] == null) {
   //pass
  }
  else {
   bad_values.push(argv[['_'][index]])
   ans['bad_values'].push(argv[['_'][index]]);
  }
 }

 // Array for tracking Required Parameters which we not given
 // or were not given correctly
 var missed_parameters = [];
 var printed_message_yet = false;

 // Set printed_message_yet to true if we don't want to print
 // any message to console.log because print_missing_parameters was
 // passed in as false
 if(!print_missing_parameters) {
  printed_message_yet = true;
 }

 // No Parameters are required
 // Set flag to return what was passed in
 if(required_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to see if all Required Parameters were passed in
 for (var index = 0; index < required_parameters.length; index++) {
  if(typeof good_parameters[required_parameters[index]] === 'undefined') {
   missed_parameters.push(required_parameters[index]);

   // Only print the missing Parameter message once
   // Only print the missing Parameters if <print_missing_parameters>
   // was passed in as true to the method
   if((!printed_message_yet) && print_missing_parameters) {
    console.log("< Required Missing Parameters >");
    printed_message_yet = true;
   }

   if((bad_parameters.includes(required_parameters[index])) && (print_missing_parameters)) {
    console.log(required_parameters[index] + " was passed in as a Parameter without an associated Value");
   }
   else if((bad_values.includes(required_parameters[index])) && (print_missing_parameters)) {
    console.log(required_parameters[index] + " was passed in as a Value without an associated Parameter");
   }

  }
 }

 // Need another loop here to deal with Parameters which are required and not passed in

 // Track how many required Parameters are missing?

 // If no Parameters are required then set the Parameter check flag to true
 if(missed_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to print which Parameters
 //for (var index = 0; index < required_parameters.length; index++) {
 //}

 if(!required_parameter_check_passed) {
  // Return false as required_parameters was not met
  
  // Debugging
  console.log("Failed");
  
  return required_parameter_check_passed
 }
 else {
  // Debugging
  console.log("Passed");
  
  return ans;
 }

}
