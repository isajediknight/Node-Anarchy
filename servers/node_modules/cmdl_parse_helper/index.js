/*
 * This is a custom module for parsing Parameters passed
 * into the commandline.  It utilizes the minimist npm
 * module to do the parsing.  Then it identifies the correct
 * and incorrect Parameters and Values in the sense of
 * which Parameters have Values.  It does not do validation.
 *
 * Requirements:
 * 1) One dash means the Parameter is a single character
 * 2) Two dashes are required if the Parameter is more than one character
 *
 * Does:
 * 1) Validates which Parameters have Values
 * 2) 
 *
 * Does Not:
 * 1) Validate Values of Parameters are correct or accurate ie does an IP Address have 3 dots in it
 * 2) 
 */

// npm Module for getting Parameters from the commandline
var argv = require('minimist')(process.argv.slice(2));

// Text Coloration for console.log()
var helper = require('node_anarchy_helper');
var txt = helper.text_coloration();

exports.parsed_parameters = function (required_parameters=[],print_debug=true) {
 /*
  * Variables
  *
  *  Goal
  *   - To capture and assign parameters passed in from the commandline
  *  
  *  < required_parameters >
  *   = Definition =
  *    - Array which contains the required parameters
  *    - Must be an Array
  *   = Purpose =
  *    - If these are not met ans['required_parameters_met'] will be false
  *    - If false force end the program or force the user to enter the required parameters
  *  
  *  < print_debug >
  *   = Purpose =
  *    - To display the < required_parameters > which were not passed in
  *
  */

 // Debug
 //console.log("Starting Method!");
 //console.log(required_parameters);
 //console.log(print_debug);
 //console.log(process.argv);
 //console.log(argv);
 // Invalid Values
 //console.log(argv['_']);

 // Print statement to put a new line so output is easier to read
 var starting_newline_printed = false;

 // [ Error Handling ]
 // Validating < required_parameters > passed in is an Array
 // Passed in Variable: required_parameters
 if(!Array.isArray(required_parameters)) {

  if(!starting_newline_printed) {
   console.log("");
   starting_newline_printed = true;
  }

  console.log("< "+txt['error!']+"Fatal Error"+txt['end']+" >")
  console.log("Passed in Variable "+txt['user']+"required_parameters"+txt['end']
	  +" is "+txt['error']+"not"+txt['end']+" an "+txt['notify']+"Array"+txt['end']+"\n")
 }

 /*
  * ans means answer
  * it is the usual variable name isajediknight uses when wanting to
  * return values from a method / class / etc
  */
 var ans = {
  'required_parameters_met':false,		// Boolean for if all the required Parameters have Values
  'human_keys':[],				// Parameters passed into the script
  'bad_parameters':[],				// Parameters without Values
  'good_parameters':[],				// Parameters with Values
  'bad_values':argv['_'],			// Values without a Parameter
  'missed_parameters':[],			// Parameters which were required but not passed in
  'good_values':[],				// Values which have been assigned a Parameter
  'required_parameters':required_parameters	// Array of the required Parameters passed into this function
 };

 // Debug
 //console.log(process.argv[2]);
 //console.log(process.argv[8].charAt(0));
 //console.log(process.argv[8].length);
 //console.log((process.argv[8].charAt(0) == '-') && (process.argv[8].length > 2));

 var invalid_required_parameter_flag = false;
 var printed_error_flag = false;
 for (var index = 2; index < process.argv.length; index++) {

  /*
   * [ Error Handling ]
   *
   *  If
   *   - The first character is '-'
   *   - The second character is not '-'
   *   - The length is larger than 2
   *   - The length is not 2
   */
  if((process.argv[index].charAt(0) == '-')
	  && !(process.argv[index].charAt(1) == '-')
	  && (process.argv[index].length > 2)
	  && !(process.argv[index].length == 2)) {

   // I'm not suing this anywhere else ... remove it? 
   invalid_required_parameter_flag = true;

   /*
    * [ Error Handling ]
    *
    *  Catches
    * 	- If a Parameter that is longer than one character is only passed in with a single '-' and not two '--'
    */
   if(!printed_error_flag) {

    // Readability Spacing
    if(!starting_newline_printed) {
     console.log("");
     starting_newline_printed = true;
    }

    console.log("\n"+txt['subtle']+"<"+txt['end']+" An "+txt['error']+"incorrect"+txt['end']+" Parameter has been detected "+txt['subtle']+">"+txt['end']);
    printed_error_flag = true;
   }

   // Print the Parameter that needs two dashes '--'
   console.log(txt['user']+process.argv[index] +txt['end']
	   +" begins with '"+txt['white!']+"-"+txt['end']+"' but is "+txt['notify']
	   +"longer"+txt['end']+" than "+txt['metric']+"1"+txt['end']+" character");
  }
 }

 // Adding a new line to make output easier to read
 if(printed_error_flag) {
  console.log("[ "+txt['user!']+"Rerun"+txt['end']+" script and ensure the above Parameters have "+txt['metric']+"2"+txt['end']+" dashes '"+txt['white!']+"--"+txt['end']+"' ]")
 }

 var required_parameter_check_passed = false;

 // List of all actual keys
 var keys = Object.keys(argv);
 // Uncomment below line to see keys that were passed in verbatim
 //console.log(keys);

 // List of defined keys that were actually passed in
 var human_keys = []

 // Parameters with no Value passed in
 var bad_parameters = []

 // Correct Paramters
 // Correct in the sense that there is a Value
 // Not that the Value is valid
 // No quality validation is done in this module
 var good_parameters = []

 // Record:
 //   Good Parameters
 //   Bad Parameters
 //   Human Keys
 for (index = 0; index < keys.length; index++) {
  if(argv[keys[index]] === true) {
   bad_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['bad_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
  else if((argv[keys[index]] != null) && (keys[index] != '_')) {
   good_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['good_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
 }

/* not needed?
 // Values with no Parameter passed in
 var bad_values = []

 for (index = 0; index < argv['_'].length; index++) {
  if(argv[['_'][index]] == null) {
   // This if is never run
   //console.log("this aint ever RUUUUUUUUUUUUUn");
   //ans['good_values'].push(argv[index]);
  }
  else {
   bad_values.push(argv[['_'][index]])
   ans['bad_values'].push(argv['_'][index]);
  }
 }
*/

 // Array for tracking Required Parameters which we not given
 // or were not given correctly
 var missed_parameters = [];
 var printed_message_yet = false;

 // Set printed_message_yet to true if we don't want to print
 // any message to console.log because print_debug was
 // passed in as false
 if(!print_debug) {
  printed_message_yet = true;
 }

 // No Parameters are required
 // Set flag to return what was passed in
 if(required_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to see if all Required Parameters were passed in
 //for (var index = 0; index < required_parameters.length; index++) {
 for (var index = 0; index < keys.length; index++) {

  console.log("Loop:"+required_parameters[index]);
  //if(typeof good_parameters[required_parameters[index]] === 'undefined') {

  if(keys[index] == '_') {
   //pass - these are bad Values
  }

  // if it is a missed parameter
  else if(!(good_parameters.includes(keys[index]))) {
   missed_parameters.push(keys[index]);
   ans['missed_parameters'].push(keys[index]);
   // Debug
   //console.log(required_parameters[index]);
   //console.log(good_parameters);
   //console.log(good_parameters[required_parameters[index]]);

   // Only print the missing Parameter message once
   // Only print the missing Parameters if <print_debug>
   // was passed in as true to the method
   //console.log(!printed_message_yet);
   //console.log(print_debug);
   //console.log(missed_parameters.length > 0);
   if((!printed_message_yet) && print_debug && (missed_parameters.length > 0)) {

    // Readability Spacing
    if(!starting_newline_printed) {
     console.log("");
     starting_newline_printed = true;
    }

    //console.log(txt['subtle']+"<"+txt['end']+" "+txt['error']+"Invalid"+txt['end']+" Arguments "+txt['subtle']+">"+txt['end']);
    //printed_message_yet = true;
   }

   // Debug
   //console.log("On: " + required_parameters[index]);

   if((bad_parameters.includes(keys[index])) && (print_debug)) {
    console.log(txt['user']+keys[index] +txt['end']+ " was passed in as a Parameter without an associated Value");
   }
   else if((ans['bad_values'].includes(keys[index])) && (print_debug)) {
    console.log(txt['user']+keys[index] +txt['end']+ " was passed in as a Value without an associated Parameter");
   }

  }

  else if(!(argv[keys[index]] === undefined)){//need additonal check for required parameters here
   // Debug
   //console.log("assigning --> "+required_parameters[index]+":"+argv[required_parameters[index]]);
   ans['good_values'].push(argv[required_parameters[index]]);
   ans[required_parameters[index]] = argv[required_parameters[index]];
  }

 }
 if(printed_message_yet) {
  console.log("");
 }

 // Need another loop here to deal with Parameters which are required and not passed in
 //console.log(txt['subtle']+"<"+txt['end']+" "+txt['notify']+"Required"+txt['end']+" "+txt['error']+"Missing"+txt['end']+" Parameters "+txt['subtle']+">"+txt['end']);

 // Track how many required Parameters are missing?

 // If no Parameters are required then set the Parameter check flag to true
 if(missed_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to print which Parameters
 //for (var index = 0; index < required_parameters.length; index++) {
 //}

 if(!required_parameter_check_passed) {
  // Return false as required_parameters was not met
  
  // Debug
  // Decided I needed to print this no matter what
  //if(print_debug) {
  console.log(txt['subtle']+"<"+txt['end']+" "+txt['notify']+"Required"+txt['end']+" Parameters were "+txt['error']+"not"+txt['end']+" met "+txt['subtle']+">"+txt['end']);
 }
 else {

  ans['required_parameters_met'] = true;

  // Debug
  if(print_debug) {

   // Readability Spacing
   if(!starting_newline_printed) {
    console.log("");
    starting_newline_printed = true;
   }

   console.log("< "+txt['notify']+"Required"+txt['end']+" Parameters were "+txt['passed']+"met"+txt['end']+" >");
  }
  
 }

 console.log("< "+txt['passed']+"Good"+txt['end']+" Parameters  >")
 // The Key as a string of a good_parameters
 var good_parameter_key = '';
 for(index = 0; index < ans['good_parameters'].length;index++) {
  good_parameter_key = ans['good_parameters'][index];
  console.log(good_parameter_key + ":" + ans[good_parameter_key]);
 }

 console.log("\n< "+txt['error']+"Bad"+txt['end']+" Parameters >")
 var bad_parameter_key = '';
 for(index = 0; index < ans['bad_parameters'].length;index++) {
  bad_parameter_key = ans['bad_parameters'][index];
  console.log(bad_parameter_key + ":" + ans[bad_parameter_key]);
 }

 return ans;

}
