/*
 * This is a custom module for parsing Parameters passed
 * into the commandline.  It utilizes the minimist npm
 * module to do the parsing.  Then it identifies the correct
 * and incorrect Parameters and Values in the sense of
 * which Parameters have Values.  It does not do validation
 *
 * Requirements:
 * 1) One dash means the Parameter is a single character
 * 2) Two dashes are required if the Parameter is more than one character
 *
 * Does:
 * 1) Validates which Parameters have Values
 * 2) 
 *
 * Does Not:
 * 1) Validate Values of Parameters are correct or accurate
 * 2) Check to see 
 */

// npm Module for getting Parameters from the commandline
var argv = require('minimist')(process.argv.slice(2));

// Text Coloration for console.log()
var helper = require('node_anarchy_helper');
var txt = helper.text_coloration();

// Example local module import
//var dt = require('./myfirstmodule');

// Example method
exports.myDateTime = function () {
 return Date();
};

exports.parsed_parameters = function (required_parameters=[],print_missing_parameters=true) {

 // Debug
 //console.log("Starting Method!");
 //console.log(required_parameters);
 //console.log(print_missing_parameters);
 // console.log(process.argv);

 // [ Error Handling ]
 // Validating the variable passed in is an Array
 // Passed in Variable: required_parameters
 if(!Array.isArray(required_parameters)) {
  console.log(txt['error!']+"< Fatal Error >"+txt['end'])
  console.log("Passed in Variable "+txt['user']+"required_parameters"+txt['end']
	  +" is "+txt['error']+"not"+txt['end']+" an "+txt['notify']+"Array"+txt['end']+"\n")
  //console.log(txt['user']+"parsed_parameters"+txt['end']+" "+txt['notify']+"method"+txt['end']+" was passed "+txt['error']+"invalid Parameter"+txt['end']+" >");
  //console.log("required_parameters is "+txt['error']+"not"+txt['end']+" an "+txt['notify']+"Array"+txt['end']);
 }

 // ans means answer
 // it is the usual variable name isajediknight uses when wanting to
 // return values from a method / class / etc
 var ans = {
  'required_parameters_met':false,
  'human_keys':[],
  'bad_parameters':[],
  'good_parameters':[],
  'bad_values':[],
  'missed_parameters':[],
  'required_parameters':required_parameters
 };

 // Debug
 //console.log(process.argv[2]);
 //console.log(process.argv[8].charAt(0));
 //console.log(process.argv[8].length);
 //console.log((process.argv[8].charAt(0) == '-') && (process.argv[8].length > 2));

 var invalid_required_parameter_flag = false;
 var printed_error_flag = false;
 for (var index = 2; index < process.argv.length; index++) {
  if((process.argv[index].charAt(0) == '-')
	  && !(process.argv[index].charAt(1) == '-')
	  && (process.argv[index].length > 2)
	  && !(process.argv[index].length == 2)) {
   invalid_required_parameter_flag = true;
   ans['required_parameters'] = "not an Array"

   if(!printed_error_flag) {
    console.log(txt['subtle']+"<"+txt['end']+" An "+txt['error']+"incorrect"+txt['end']+" Parameter has been detected "+txt['subtle']+">"+txt['end']);
    printed_error_flag = true;
   }

   console.log(txt['user']+process.argv[index] +txt['end']
	   +" begins with "+txt['white!']+"'-'"+txt['end']+" but is "+txt['notify']
	   +"longer"+txt['end']+" than "+txt['metric']+"1"+txt['end']+" character");
  }
 }
 if(printed_error_flag) {
  console.log("")
 }

 var required_parameter_check_passed = false;

 // List of all actual keys
 var keys = Object.keys(argv);
 // Uncomment below line to see keys that were passed in verbatim
 //console.log(keys);

 // List of defined keys that were actually passed in
 var human_keys = []

 // Parameters with no Value passed in
 var bad_parameters = []

 // Correct Paramters
 // Correct in the sense that there is a Value
 // Not that the Value is valid
 // No quality validation is done in this module
 var good_parameters = []

 // Record:
 //   Good Parameters
 //   Bad Parameters
 //   Human Keys
 for (index = 0; index < keys.length; index++) {
  if(argv[keys[index]] === true) {
   bad_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['bad_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
  else if((argv[keys[index]] != null) && (keys[index] != '_')) {
   good_parameters.push(keys[index]);
   human_keys.push(keys[index]);
   ans['good_parameters'].push(keys[index]);
   ans['human_keys'].push(keys[index]);
  }
 }

 // Values with no Parameter passed in
 var bad_values = []

 for (index = 0; index < argv['_'].length; index++) {
  if(argv[['_'][index]] == null) {
   //pass
  }
  else {
   bad_values.push(argv[['_'][index]])
   ans['bad_values'].push(argv[['_'][index]]);
  }
 }

 // Array for tracking Required Parameters which we not given
 // or were not given correctly
 var missed_parameters = [];
 var printed_message_yet = false;

 // Set printed_message_yet to true if we don't want to print
 // any message to console.log because print_missing_parameters was
 // passed in as false
 if(!print_missing_parameters) {
  printed_message_yet = true;
 }

 // No Parameters are required
 // Set flag to return what was passed in
 if(required_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to see if all Required Parameters were passed in
 for (var index = 0; index < required_parameters.length; index++) {
  //if(typeof good_parameters[required_parameters[index]] === 'undefined') {
  if(!(good_parameters.includes(required_parameters[index]))) {
   missed_parameters.push(required_parameters[index]);
   ans['missed_parameters'].push(required_parameters[index]);
   // Debug
   //console.log(required_parameters[index]);
   //console.log(good_parameters);
   //console.log(good_parameters[required_parameters[index]]);

   // Only print the missing Parameter message once
   // Only print the missing Parameters if <print_missing_parameters>
   // was passed in as true to the method
   //console.log(!printed_message_yet);
   //console.log(print_missing_parameters);
   //console.log(missed_parameters.length > 0);
   if((!printed_message_yet) && print_missing_parameters && (missed_parameters.length > 0)) {
    console.log(txt['subtle']+"<"+txt['end']+" "+txt['error']+"Invalid"+txt['end']+" Arguments "+txt['subtle']+">"+txt['end']);
    printed_message_yet = true;
   }

   // Debug
   //console.log("On: " + required_parameters[index]);

   if((bad_parameters.includes(required_parameters[index])) && (print_missing_parameters)) {
    console.log(txt['user']+required_parameters[index] +txt['end']+ " was passed in as a Parameter without an associated Value");
   }
   else if((bad_values.includes(required_parameters[index])) && (print_missing_parameters)) {
    console.log(txt['user']+required_parameters[index] +txt['end']+ " was passed in as a Value without an associated Parameter");
   }

  }
 }
 if(printed_message_yet) {
  console.log("");
 }

 // Need another loop here to deal with Parameters which are required and not passed in
 console.log(txt['subtle']+"<"+txt['end']+" "+txt['notify']+"Required"+txt['end']+" "+txt['error']+"Missing"+txt['end']+" Parameters "+txt['subtle']+">"+txt['end']);

 // Track how many required Parameters are missing?

 // If no Parameters are required then set the Parameter check flag to true
 if(missed_parameters.length === 0) {
  required_parameter_check_passed = true;
 }

 // Loop to print which Parameters
 //for (var index = 0; index < required_parameters.length; index++) {
 //}



 if(!required_parameter_check_passed) {
  // Return false as required_parameters was not met
  
  // Debugging
  if(print_missing_parameters) {
   console.log(txt['subtle']+"<"+txt['end']+" "+txt['notify']+"Required"+txt['end']+" Parameters were "+txt['error']+"not"+txt['end']+" met "+txt['subtle']+">"+txt['end']);
  }
  
 }
 else {

  ans['required_parameters_met'] = true;

  // Debugging
  if(print_missing_parameters) {
   console.log("< "+txt['notify']+"Required"+txt['end']+" Parameters were "+txt['passed']+"met"+txt['end']+" >");
  }
  
 }

 return ans;

}
